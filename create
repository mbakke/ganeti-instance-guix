#!/bin/sh

# Copyright (C) 2017, 2018, 2019, 2020 Marius Bakke <marius@devup.no>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -e

. ./common.sh

if [ ! -d "$CACHE_DIR" ]; then
    mkdir -p "$CACHE_DIR"
fi
if [ ! -d "$GCROOTSDIR" ]; then
    mkdir -p "$GCROOTSDIR"
fi

GC_ROOT="$GCROOTSDIR/$INSTANCE_NAME"

# Make Guix use the specified CACHE_DIR to store Guile and Git caches.
export XDG_CACHE_HOME=$CACHE_DIR

# Say 'cheeese'.
$GUIX --version

if [ -b $TARGET_DEVICE ]; then
    DEVICE_SIZE=$($BLOCKDEV --getsize64 $TARGET_DEVICE)
else
    # Not a real block device.  Assume file disk and just use 'du'.
    DEVICE_SIZE=$(du --bytes $TARGET_DEVICE | cut -f1)
fi

# Prepare the time machine if relevant.
if [ -n "$OSP_COMMIT" -o -n "$OSP_BRANCH" -o -n "$OSP_REPO_URI" ]; then
    GUIX="$GUIX time-machine"
    if [ -n "OSP_REPO_URI" ]; then
        GUIX="$GUIX --url=$OSP_REPO_URI"
    fi
    if [ -n "OSP_COMMIT" ]; then
        GUIX="$GUIX --commit=$OSP_COMMIT"
    fi
    if [ -n "$OSP_BRANCH" ]; then
        GUIX="$GUIX --branch=$OSP_BRANCH"
    fi
    if [ -n "$OSP_DISABLE_AUTHENTICATION" ]; then
        GUIX="$GUIX --disable-authentication"
    fi
    log "Invoking time machine with the following parameters:"
    log "    $(echo GUIX | cut --complement -f1,2 -d' ')"
    GUIX="$GUIX -- "
fi

log "Building the system configuration for $VARIANT_CONFIG..."
[[ -L "$GC_ROOT" ]] && rm -f "$GC_ROOT"
$GUIX system build --no-grafts -r "$GC_ROOT" "$VARIANT_CONFIG"

log "Creating disk image..."
DISK_IMAGE=$($GUIX system vm-image --no-offload --image-size=$DEVICE_SIZE "$VARIANT_CONFIG")
DISK_IMAGE_SIZE=$(du -k $DISK_IMAGE | cut -f1)

log "Copying $DISK_IMAGE ($((${DISK_IMAGE_SIZE} / 1024)) MiB) to $TARGET_DEVICE..."
start_time=$(date +%s)
$QEMU_IMG dd bs=4M -O raw if=$DISK_IMAGE of=$TARGET_DEVICE
elapsed=$(($(date +%s) - $start_time))
speed=$(($DISK_IMAGE_SIZE / $elapsed))
log "Copied ${DISK_IMAGE_SIZE} KiB in ${elapsed} seconds (${speed} KiB/s)."

exit 0
