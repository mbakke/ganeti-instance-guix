#!/bin/sh

# Copyright (C) 2017, 2018 Marius Bakke
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -e

. ./common.sh

CONFIG_FILE=$(mktemp) || exit 1
GIT_CHECKOUT=$(mktemp -d) || exit 1
EMPTY=$(mktemp -d --suffix EMPTY) || exit 1
trap "rm -f $CONFIG_FILE ; rm -rf $GIT_CHECKOUT; rm -r $EMPTY" EXIT INT TERM

# Make sure we use root's latest Guix package definitions.
export HOME=/root
# Say 'cheeese'.
$GUIX --version

# The 'gnt-instance' tool does not like being passed text that can
# be mistaken for commands, so gibberize it through base64.
# TODO: Support plain text for API users.
echo "${OSP_CONFIG}" | $BASE64 -di > $CONFIG_FILE

if [ -b $TARGET_DEVICE ]; then
  DEVICE_SIZE=$($BLOCKDEV --getsize64 $TARGET_DEVICE)
else
  # Not a real block device.  Assume file disk and just use 'du'.
  DEVICE_SIZE=$(du --bytes $TARGET_DEVICE)
fi

test -n "${OSP_BRANCH}" && GIT_BRANCH="${OSP_BRANCH}" || GIT_BRANCH=master
test -n "${OSP_COMMIT}" && GIT_COMMIT="${OSP_COMMIT}" || GIT_COMMIT=HEAD

if [ "${GUIX_REPO_URI}" = "host" ]; then
    ROOT_PROFILE="$(readlink -f ${HOME}/.guix-profile)"
    export GUIX_ARGS="--ad-hoc guix --expose=${ROOT_PROFILE}=/root/.guix-profile"
else
    # Fetch objects from root's Guix checkout, if possible.
    printf "Checking for Guix cache dir... "
    if [ "$(ls -A ${HOME}/.cache/guix/pull)" ]; then
	GUIX_CACHE_DIR="$(readlink -f ${HOME}/.cache/guix/pull/* | head -n 1)"
    else
	GUIX_CACHE_DIR=$EMPTY
    fi
    echo $GUIX_CACHE_DIR

    # Using a container avoids having to set up GIT_SSL_CAINFO manually.
    echo "Cloning ${GIT_BRANCH}..."
    $GUIX environment -C -N --share=$GIT_CHECKOUT=$GIT_CHECKOUT \
	  --expose=$GUIX_CACHE_DIR=/guix-checkout \
	  --ad-hoc git le-certs -- git clone --branch "${GIT_BRANCH}" \
	  --reference-if-able /guix-checkout --dissociate \
	  $GIT_CLONE_ARGUMENTS $GUIX_REPO_URI $GIT_CHECKOUT

    # TODO: Verify commit.
    $GIT -C $GIT_CHECKOUT reset --hard "${GIT_COMMIT}"
    GUIX_COMMIT=$($GIT -C $GIT_CHECKOUT rev-parse HEAD)

    printf "Hashing repository on version ${GUIX_COMMIT}... "
    GUIX_SOURCE_CHECKSUM=$($GUIX hash -rx $GIT_CHECKOUT)
    echo "${GUIX_SOURCE_CHECKSUM}."

    # Make these available to the Guix process.
    export GUIX_COMMIT
    export GUIX_SOURCE_CHECKSUM

    export GUIX_ARGS="--ad-hoc -l ${GUIX_BUILD}"
fi

# Build a fixed-output derivation of Guix using $GUIX_COMMIT and use
# it to build a VM image based on the user-supplied config.scm.
DISK_IMAGE=$(cd $EMPTY && $GUIX environment -C \
    $GUIX_ARGS \
    --expose=$CONFIG_FILE=/config.scm \
    --expose=/var/guix=/var/guix \
    --expose=/gnu/store=/gnu/store \
    -- guix system vm-image \
    --image-size=$DEVICE_SIZE /config.scm)

# Copy the resulting store item onto the Ganeti disk device.
$QEMU_IMG dd bs=4M -O raw if=$DISK_IMAGE of=$TARGET_DEVICE

exit 0
