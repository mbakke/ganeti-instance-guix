#!/usr/bin/env bash

# Copyright (C) 2017, 2018, 2019, 2020 Marius Bakke <marius@devup.no>
# Copyright (C) 2022 David Larsson <david.larsson@selfhosted.xyz>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# cancel script on error
set -e
shopt -s globstar

. ./common.sh

# Check external program dependencies
verify_dependencies(){
    local dep
    for dep in guix "$SFDISK" "$WIPEFS" "$JQ" "$PARTED" "$BTRFS" mkfs.ext2 mkfs.ext3 mkfs.ext4 mkfs.xfs "$VGREMOVE"; do
        command -v "$dep" &>/dev/null || {
            echo Missing dependency "$dep" >&2
            return 1
	}
    done
}

guix_setup(){
    local GUIX=guix

    # Prepare the time machine if relevant.
    if [ -n "$OSP_COMMIT" -o -n "$OSP_BRANCH" -o -n "$OSP_REPO_URI" ]; then
	GUIX="$GUIX time-machine"
	if [ -n "$OSP_REPO_URI" ]; then
            GUIX="$GUIX --url=$OSP_REPO_URI"
	fi
	if [ -n "$OSP_COMMIT" ]; then
            GUIX="$GUIX --commit=$OSP_COMMIT"
	fi
	if [ -n "$OSP_BRANCH" ]; then
            GUIX="$GUIX --branch=$OSP_BRANCH"
	fi
	if [ -n "$OSP_DISABLE_AUTHENTICATION" ]; then
            GUIX="$GUIX --disable-authentication"
	fi
	log "Invoking time machine with the following parameters:"
	log "    $(echo $GUIX | cut --complement -f1,2 -d' ')"
	GUIX="$GUIX -- "
    fi

    GUIX="$GUIX system"

    if [ -n "$OSP_SYSTEM" ]; then
	GUIX="$GUIX --system=$OSP_SYSTEM"
    fi
    if [ -n "$OSP_TARGET" ]; then
	GUIX="$GUIX --target=$OSP_TARGET"
    fi
    echo "$GUIX"
}

# $1 like: /dev/mapper/vg--drbd-e7deba31--7f30--4475--9ff3--2565f232f780.disk0
partition_disk(){
    local TARGET_DEVICE="$1"
    local LUKS_PASSPHRASE="$2"
    local SIZE_PART_2="$3"
    #set -x
    log Starting partitioning on "$TARGET_DEVICE"

    # If this is a reinstallation, the second partition may contain a
    # mounted filesystem that needs unmounted to proceed.  If part2 is
    # a luks partition, then find it's /dev/mapper/<part> path, and
    # ensure that is unmounted.
    mapfile -t Parts < <("${SFDISK}" --no-reread -d -J "$TARGET_DEVICE" | "${JQ}" -r ".partitiontable.partitions[].node?");
    if "${CRYPTSETUP}" isLuks "${Parts[1]}" &>/dev/null; then
	local TARGET_PART="/dev/mapper/$("${LSBLK}" --json "${Parts[1]}" | "${JQ}" -r '.blockdevices[].children[0].name?')"
    else
	local TARGET_PART="${Parts[1]}"
    fi
    if "$UMOUNT" -R "${TARGET_PART}" 2>/dev/null; then
	log successfully unmounted "${TARGET_PART}"
    fi

    # Wipe any previous filesystems in case this is a reinstallation
    log Wiping any previous filesystems on "$TARGET_DEVICE"

    if "${WIPEFS}" -a "$TARGET_PART" &>/dev/null; then log successfully wiped "$TARGET_PART" ; fi
    if "${VGREMOVE}" -y "$INSTANCE_NAME"_vg01 &>/dev/null; then log successfully removed LVM Volume Group "$INSTANCE_NAME"_vg01 ; fi
    # ----DEPRECATED----    
    # the naming of the partitions may vary some, thus we allow
    # failing to wipe the partitions
    # if "${WIPEFS}" -a "$TARGET_DEVICE"p[1-9]* &>/dev/null; then echo successfully wiped "$TARGET_DEVICE"p[1-9]* ; fi
    # if "${WIPEFS}" -a "$TARGET_DEVICE"[1-9]* &>/dev/null; then echo successfully wiped "$TARGET_DEVICE"[1-9]* ; fi
    # -------END--------    
    if "${KPARTX}" -d "$TARGET_DEVICE" &>/dev/null; then log successfully deleted partition device mappings of "$TARGET_DEVICE"; fi
       
    # It has happened that some VM has kernel panicked due to first
    # sectors not being properly wiped, and writing some random stuff
    # there has solved it:
    head -c 3145728 /dev/urandom > "$TARGET_DEVICE"; sync

    # Create bios_grub partition and offset so it's easy to use either
    # of MBR or GPT or to switch between them.
    # https://www.gnu.org/software/grub/manual/grub/html_node/BIOS-installation.html#BIOS-installation
    # If part2 should have a size limit, then use that for the second partition.
    log Creating 2 partitions on "$TARGET_DEVICE"
    if [[ -n "${SIZE_PART_2}" ]]; then
	"${PARTED}" --script "$TARGET_DEVICE" \
	       mklabel gpt \
	       mkpart primary 1MiB 3MiB \
	       mkpart primary "$SIZE_PART_2" \
	       set 1 bios_grub on &>/dev/null
	[[ "$?" == 0 ]] || {
            log Failed to partition "$TARGET_DEVICE" with size "${SIZE_PART_2}" for the second partition
            return 1
	}	
    else
	"${PARTED}" --script "$TARGET_DEVICE" \
	       mklabel gpt \
	       mkpart primary 1MiB 3MiB \
	       mkpart primary 3MiB 100% \
	       set 1 bios_grub on &>/dev/null
	[[ "$?" == 0 ]] || {
            log Failed to partition "$TARGET_DEVICE"
            return 1
	}
    fi
    log Done creating 2 partitions. Checking for LUKS.
    # If luks, then luks-encrypt the target partition
    local TARGET_PART_NEW=$("${SFDISK}" --no-reread -d -J "$TARGET_DEVICE" | jq -r ".partitiontable.partitions[1].node")
    log TARGET_PART_NEW="$TARGET_PART_NEW"
    if [[ -n "${LUKS_PASSPHRASE}" ]]; then
	log LUKS passphrase is set. Starting LUKS formatting.
	if "${CRYPTSETUP}" luksClose "${TARGET_PART_NEW##*/}"_mapped &>/dev/null; then
	    log closed luks device mapping "${TARGET_PART_NEW##*/}"_mapped; fi
	if printf '%s' "$LUKS_PASSPHRASE" | "${CRYPTSETUP}" luksFormat --type=luks1 --key-file - "${TARGET_PART_NEW}" &>/dev/null; then
	    log Successfully luksformatted "${TARGET_PART_NEW}"
	else
	    log Failed to luksformat "${TARGET_PART_NEW}"
	    return 1
	fi
	#if printf '%s' "$LUKS_PASSPHRASE" | "${CRYPTSETUP}" luksOpen --key-file - "${TARGET_PART_NEW}" test-system_mapped &>/dev/null; then	
	if printf '%s' "$LUKS_PASSPHRASE" | "${CRYPTSETUP}" luksOpen --key-file - "${TARGET_PART_NEW}" "${TARGET_PART_NEW##*/}"_mapped &>/dev/null; then
	    log Successfully mapped "${TARGET_PART_NEW}" to "${TARGET_PART_NEW##*/}"_mapped
	    printf '%s' "/dev/mapper/$("${LSBLK}" --json "${Parts[1]}" | "${JQ}" -r .blockdevices[0].children[0].name)"
	    return 0
	else
	    log Failed to map "${TARGET_PART_NEW}" to "${TARGET_PART_NEW##*/}"_mapped
	    return 1
	fi
    fi
    printf '%s' "${TARGET_PART_NEW}"
}

# $1 like: /dev/mapper/vg--drbd-e7deba31--7f30--4475--9ff3--2565f232f780.disk0
# find_partition_path returns the second partition's filepath
find_partition_path(){
    local TARGET_DEVICE="$1"
    local -i num="$2"; num=$((num-1))
    "${SFDISK}" --no-reread -d -J "$TARGET_DEVICE" | "${JQ}" -r ".partitiontable.partitions[$num].node" || {
        echo Failed to find partition filepath for partition "$2" for "$TARGET_DEVICE" >&2
	return 1
    }
}

# $1 like: /dev/mapper/vg--drbd-e7deba31--7f30--4475--9ff3--2565f232f780.disk0
# find_uuid returns the second partition's uuid
find_uuid(){
    local TARGET_DEVICE="$1"
    local -i num="$2"; num=$((num-1))
    "${SFDISK}" --no-reread -d -J "$TARGET_DEVICE" | "${JQ}" -r ".partitiontable.partitions[$num].uuid" || {
        echo Failed to find partition filepath for partition "$2" for "$TARGET_DEVICE" >&2
	return 1
    }
}

# $1 like: /dev/mapper/vg--drbd-e7deba31--7f30--4475--9ff3--2565f232f780.disk0
create_filesystems(){
    local TARGET_DEVICE="$1"
    local TARGET_PARTITION="$2"
    local FS_TYPE="$3"
    local LAYOUT="$4"
    local SWAP_SPACE=4G

    local TARGET_DEV_PART2="$TARGET_PARTITION"
    
    if [[ "$LAYOUT" == standard ]] && [[ "$FS_TYPE" == btrfs ]]; then
	echo Creating btrfs filesystem on second partition of "$TARGET_DEVICE" >&2
	mkfs.btrfs -L "${INSTANCE_NAME}-system" -f "$TARGET_DEV_PART2" || {
            echo Failed to mkfs.btrfs on "$TARGET_DEV_PART2" >&2
	    return 1
	}

	# Mount and create root filesystem
	local TEMPDIR=$(mktemp -d /tmp/mnt_XXXXXX )
	"${MOUNT}" "$TARGET_DEV_PART2" "$TEMPDIR" || {
            echo Failed to mount "$TARGET_DEV_PART2" onto "$TEMPDIR" >&2
	    rmdir "$TEMPDIR"
	    return 1
	}
	"${BTRFS}" subvolume create "$TEMPDIR"/system-root

	# Setup the SWAP subvolume
	"${BTRFS}" subvolume create "$TEMPDIR"/system-root/swap

	# Setup the SWAP-file
	chmod 700 "$TEMPDIR"/system-root/swap
	truncate -s 0 "$TEMPDIR"/system-root/swap/swapfile
	"${CHATTR}" +C "$TEMPDIR"/system-root/swap/swapfile
	"${BTRFS}" property set "$TEMPDIR"/system-root/swap/swapfile compression none
	"${FALLOCATE}" -l "$SWAP_SPACE" "$TEMPDIR"/system-root/swap/swapfile
	chmod 600 "$TEMPDIR"/system-root/swap/swapfile
	"${MKSWAP}" -f "$TEMPDIR"/system-root/swap/swapfile

	# Setup additional subvolumes
	mkdir -p "$TEMPDIR"/system-root/gnu
	mkdir -p "$TEMPDIR"/system-root/var
	mkdir -p "$TEMPDIR"/system-root/var/lib
	"${BTRFS}" subvolume create "$TEMPDIR"/system-root/gnu/store
	"${BTRFS}" subvolume create "$TEMPDIR"/system-root/var/log
	"${BTRFS}" subvolume create "$TEMPDIR"/system-root/var/lib/mysql
	"${BTRFS}" subvolume create "$TEMPDIR"/system-root/home
	umount "$TEMPDIR"
	rmdir "$TEMPDIR"
    elif [[ "$LAYOUT" == basic ]] && [[ "$FS_TYPE" == btrfs ]]; then
	"${WIPEFS}" -a "$TARGET_DEV_PART2"
	mkfs.btrfs -L "${INSTANCE_NAME}-system" -f "$TARGET_DEV_PART2" || {
            echo Failed to mkfs.btrfs on "$TARGET_DEV_PART2" >&2
	    return 1
	}
    elif [[ "$LAYOUT" == basic ]] && ([[ "$FS_TYPE" =~ ext(2|3|4) ]] || [[ "$FS_TYPE" == xfs ]]); then
	"${WIPEFS}" -a "$TARGET_DEV_PART2"
	mkfs."$FS_TYPE" -L "${INSTANCE_NAME}-system" "$TARGET_DEV_PART2" || {
            echo Failed to mkfs."$FS_TYPE" on "$TARGET_DEV_PART2" >&2
	    return 1
	}
    elif [[ "$LAYOUT" == standard ]] && ([[ "$FS_TYPE" =~ ext(2|3|4) ]] || [[ "$FS_TYPE" =~ xfs ]]); then
	"${PARTED}" --script "$TARGET_DEVICE" \
	       set 2 lvm on
	"${PVCREATE}" "$TARGET_DEV_PART2"
	"${VGCREATE}" "$INSTANCE_NAME"_vg01 "$TARGET_DEV_PART2"
	ROOT_SIZE='-l 10%VG'
	HOME_SIZE='-l 10%VG'
	GNU_STORE_SIZE='-l 55%VG'
	VAR_LOG_SIZE='-l 10%VG'
	VAR_LIB_MYSQL_SIZE='-l 10%VG'
	SWAP_SIZE='-l 100%FREE'
	"${LVCREATE}" --yes -n lv_root $ROOT_SIZE -W y "$INSTANCE_NAME"_vg01
	"${LVCREATE}" --yes -n lv_home $HOME_SIZE -W y "$INSTANCE_NAME"_vg01
	"${LVCREATE}" --yes -n lv_gnu_store $GNU_STORE_SIZE -W y "$INSTANCE_NAME"_vg01
	"${LVCREATE}" --yes -n lv_var_log $VAR_LOG_SIZE -W y "$INSTANCE_NAME"_vg01
	"${LVCREATE}" --yes -n lv_var_lib_mysql $VAR_LIB_MYSQL_SIZE -W y "$INSTANCE_NAME"_vg01
	"${LVCREATE}" --yes -n lv_swap $SWAP_SIZE -W y "$INSTANCE_NAME"_vg01
	# -f (force) is needed if reinstalling and previous
	# logical-volume also was a swap volume and still has that
	# signature, else mkswap command will wait for user
	# confirmation
	"${MKSWAP}" -f --label "$INSTANCE_NAME"-swap /dev/"$INSTANCE_NAME"_vg01/lv_swap
	echo Creating "$FS_TYPE" filesystems on logical volumes of "$INSTANCE_NAME"_vg01 of "$TARGET_DEV_PART2" >&2
	for lv in lv_root lv_home lv_gnu_store lv_var_log lv_var_lib_mysql; do
	    mkfs."$FS_TYPE" -L "${INSTANCE_NAME}"-system "/dev/${INSTANCE_NAME}_vg01/${lv}" || {
		echo Failed to mkfs."$FS_TYPE" -L "${INSTANCE_NAME}"-system on /dev/"${INSTANCE_NAME}_vg01/$lv" >&2
		return 1
	    }
	done
    else
	echo "Unsupported filesystem type and/or layout combination: FS_TYPE: $FS_TYPE LAYOUT: $LAYOUT"
	return 1
    fi
}

prep_init_mount_point(){
    local TARGET_DEVICE="$1"
    local TARGET_PARTITION="$2"
    local GUIX_CONFIG="$3"
    local FS_TYPE="$4"
    local LAYOUT="$5"
    local LUKS_UUID="$6"
    local TEMPDIR=$(mktemp -d /tmp/mnt_XXXXXX )
    echo Initializing guix on second partition of "$TARGET_DEVICE" using config "$GUIX_CONFIG" >&2

    local TARGET_DEV_PART2="$TARGET_PARTITION"
    
    # If FS_TYPE is btrfs we can just mount it, else we assume second
    # partition is an LVM partition and we must mount logical volumes
    # instead:
    if [[ "$FS_TYPE" == "btrfs" ]]; then
	"${MOUNT}" "$TARGET_DEV_PART2" "$TEMPDIR" >&2 || {
            echo Failed to mount "$TARGET_DEV_PART2" onto "$TEMPDIR" >&2
	    rmdir "$TEMPDIR"
	    return 1
	}
	# Assume that if <mountpoint>/system-root exists, it is the root filesystem
	# mount-point for guix
	if [[ -d "$TEMPDIR"/system-root ]]; then
	    TARGET_ROOT="$TEMPDIR"/system-root
	else
	    TARGET_ROOT="$TEMPDIR"
	fi
    else
	# The standard layout for non-btrfs filesystems is setup with LVM
	if [[ "$LAYOUT" == standard ]]; then
	    echo Mounting LVM logical volumes from "${INSTANCE_NAME}"_vg01 of "$TARGET_DEV_PART2" >&2
	    TARGET_ROOT="$TEMPDIR"
	    for lv in lv_root lv_home lv_gnu_store lv_var_log lv_swap lv_var_lib_mysql; do
		lv="${lv#lv_}"
		lv="${lv%root}"
		mkdir -p "$TEMPDIR"/"${lv//_/\/}" >&2
		if [[ ! "$lv" == swap ]]; then
		    echo running: mount "/dev/${INSTANCE_NAME}_vg01/lv_${lv:-root}" "$TEMPDIR"/"${lv//_/\/}" >&2
		    "${MOUNT}" "/dev/${INSTANCE_NAME}_vg01/lv_${lv:-root}" "$TEMPDIR"/"${lv//_/\/}" >&2 || {
			echo Failed to mount "/dev/${INSTANCE_NAME}_vg01/lv_${lv}" on "$TEMPDIR"/"${lv//_/\/}" >&2
			return 1
		    }
		fi
	    done
	elif [[ "$LAYOUT" == basic ]]; then
	    "${MOUNT}" "$TARGET_DEV_PART2" "$TEMPDIR" >&2 || {
		echo Failed to mount "$TARGET_DEV_PART2" onto "$TEMPDIR" >&2
		rmdir "$TEMPDIR"
		return 1
	    }
	    TARGET_ROOT="$TEMPDIR"
	fi
    fi

    # Create /etc/config.env on target with relevant environment
    # variables, assuming that the value of the variables are
    # correctly set, we therefore skip the quote for ease of parsing
    # them back to our guix config.scm files.
    TARGET_ETC="$TARGET_ROOT"/etc
    mkdir -p "$TARGET_ETC" >&2
    printf '%s\n' INSTANCE_NAME="$INSTANCE_NAME" > "$TARGET_ETC"/config.env
    printf '%s\n' NIC_0_NETWORK_SUBNET="$NIC_0_NETWORK_SUBNET" >> "$TARGET_ETC"/config.env
    printf '%s\n' NIC_0_NETWORK_GATEWAY="$NIC_0_NETWORK_GATEWAY" >> "$TARGET_ETC"/config.env
    printf '%s\n' NIC_0_IP="$NIC_0_IP" >> "$TARGET_ETC"/config.env
    printf '%s\n' FS_TYPE="$FS_TYPE" >> "$TARGET_ETC"/config.env
    printf '%s\n' LUKS_UUID="$LUKS_UUID" >> "$TARGET_ETC"/config.env
    guix describe --format=json | "${JQ}" -r '"GUIX_COMMIT=" + .[].commit' >> "$TARGET_ETC"/config.env
    cat "$(dirname "$(readlink -f "${GUIX_CONFIG}")")"/config-base.scm > "$TARGET_ETC"/config-base.scm
    printf "$TARGET_ROOT"
}
# guix system init on a target device's second partition
initialize_guix(){
    local GUIX_CONFIG="$1"
    local TARGET_ROOT="$2"
    export TARGET_DEVICE="$3"
    export FS_TYPE="$4"
    local GUIX="$5"

    # Install GuixSD
    $GUIX init "$GUIX_CONFIG" "$TARGET_ROOT" || {
        echo Failed to guix system init "$GUIX_CONFIG" "$TARGET_ROOT" >&2
	"${UMOUNT}" -R "$TARGET_ROOT"
	rmdir "$TARGET_ROOT"
	return 1
    }
    if umount -R "${TARGET_ROOT}" 2>/dev/null; then echo Recursively unmounted "$TARGET_ROOT"; fi
    if umount -R "${TARGET_ROOT%/system-root}" 2>/dev/null; then echo Recursively unmounted "${TARGET_ROOT%/system-root}"; fi

    rmdir "${TARGET_ROOT%/system-root}"
}

main(){
    # Check that external programs like wipefs, lvcreate etc. are
    # available.
    verify_dependencies

    # for testing, comment . ./common.sh above and then run (replace
    # value of TARGET_DEVICE etc. as needed):
    # INSTANCE_NAME=testinstance \
    # NIC_0_IP=1.2.3.4 \
    # NIC_0_NETWORK_SUBNET=1.2.3.4/24 \
    # NIC_0_NETWORK_GATEWAY=1.2.3.1 \
    # DISK_COUNT=1 \
    # DISK_0_PATH=/dev/mapper/vg--drbd-e7deba31--7f30--4475--9ff3--2565f232f780.disk0 \
    # OSP_LAYOUT=standard OSP_FILESYSTEM=xfs \
    # OSP_VARIANT_CONFIG=$(pwd)/examples/dynamic-lvm.scm \
    # ./create
    local DEFAULT_VARIANT_CONFIG="$(dirname $(readlink -f "${BASH_SOURCE[0]}"))/examples/dynamic.scm"
    local VARIANT_CONFIG="${VARIANT_CONFIG:-$DEFAULT_VARIANT_CONFIG}"
    echo Running with options set to:
    echo INSTANCE_NAME: "${INSTANCE_NAME}"
    echo TARGET_DEVICE: "${TARGET_DEVICE}"
    echo OSP_FILESYSTEM: "${OSP_FILESYSTEM:-ext4}"
    echo OSP_LAYOUT: "${OSP_LAYOUT:-basic}"
    echo VARIANT_CONFIG: "${VARIANT_CONFIG}"

    # Make Guix use the specified CACHE_DIR to store Guile and Git caches.
    if [[ -n "$CACHE_DIR" ]] && [[ ! -d "$CACHE_DIR" ]]; then
	mkdir -p "$CACHE_DIR"
    fi
    if [[ -n "$GCROOTSDIR" ]] && [[ ! -d "$GCROOTSDIR" ]]; then
	mkdir -p "$GCROOTSDIR"
    fi

    if [[ -n "$GCROOTSDIR" ]]; then
	local GC_ROOT="$GCROOTSDIR/$INSTANCE_NAME"
    fi
    if [[ -n "$CACHE_DIR" ]]; then
	export XDG_CACHE_HOME="$CACHE_DIR"
    fi

    # Check if TARGET_DEVICE is a real block device, and losetup it if
    # it isn't (for example when using a file disk):
    if [[ ! -b "$TARGET_DEVICE" ]]; then
	local TARGET_DEVICE_ORIG="$TARGET_DEVICE"

	# Find and remove current loop mappings first if needed:
	local -a LoopMappings
	mapfile -t LoopMappings < <("${LOSETUP}" -J -l | "${JQ}" -r ".loopdevices[]|select(.\"back-file\" == \"${TARGET_DEVICE}\")|.name")
	local loopdev
	for loopdev in "${LoopMappings[@]}"; do
	    # TODO: find unmount any mounted filesystems
	    
	    # Remove/deactivate any lvm for the instance
	    if "${VGREMOVE}" -y "$INSTANCE_NAME"_vg01 &>/dev/null; then log successfully removed LVM Volume Group "$INSTANCE_NAME"_vg01 ; fi
	    
	    # Remove luks mappings first if those exist
	    local -a LuksMappings
	    mapfile -t LuksMappings < <("${LSBLK}" --json "$loopdev" | "${JQ}" -r ".blockdevices[]|select(.name == \"${loopdev##*/}\").children[]?.children[]?|select(.type == \"crypt\").name")
	    for luksmapping in "${LuksMappings[@]}"; do
		if "${CRYPTSETUP}" luksClose "$luksmapping"; then
		    log unmapped luksmapping "$luksmapping" of loopdev "$loopdev" from backing file "$TARGET_DEVICE";
		else
		    log failed to unmap luksmapping "$luksmapping" of loopdev "$loopdev" from backing file "$TARGET_DEVICE";
		    return 1
		fi
	    done

	    # Now unmap the loop device
	    if "${LOSETUP}" -d "$loopdev"; then
		log unmapped loopdev "$loopdev" from backing file "$TARGET_DEVICE";
	    else
		log failed to unmap existing loop device mapping for TARGET_DEVICE: "$TARGET_DEVICE"
		return 1
	    fi
	done

	# Attempt to map the file disk to a loop device
	if ! TARGET_DEVICE=$("${LOSETUP}" --show -f "$TARGET_DEVICE"); then
	    echo Failed to "${LOSETUP}" "$TARGET_DEVICE_ORIG" >&2
	    return 1
	fi
    fi

    # Check OS parameters and set an appropriate $GUIX command that
    # will use guix time-machine if needed.
    local GUIX_COMMAND=$(guix_setup)
    echo GUIX_COMMAND is: "$GUIX_COMMAND"

    # Say 'cheeese'.
    $GUIX_COMMAND --version

    # A basic 2 partitions setup.
    local TARGET_PARTITION="$(partition_disk "$TARGET_DEVICE" "${LUKS_PASSPHRASE}" "$PART_SIZE")"
    log DONE PARTITIONING. TARGET_PARTITION set to "$TARGET_PARTITION"

    # Each filesystem and layout option combination is handled in the
    # create_filesystems function. This will possibly setup lvm based
    # on the OSP options.
    create_filesystems "$TARGET_DEVICE" "$TARGET_PARTITION" "${OSP_FILESYSTEM:-ext4}" "${OSP_LAYOUT:-basic}"
    log DONE CREATING FILESYSTEMS

    # Prep the mount point to initialize guix
    mapfile -t Parts < <("${SFDISK}" --no-reread -d -J "$TARGET_DEVICE" | "${JQ}" -r ".partitiontable.partitions[].node?");
    export LUKS_UUID="$("${BLKID}" -s UUID -o value "${Parts[1]}")"
    export LVM_UUID="$("${BLKID}" -s UUID -o value "${TARGET_PARTITION}")"
    if [[ -n "$LUKS_PASSPHRASE" ]]; then
	log LUKS_UUID="$LUKS_UUID"; fi
    if [[ "${OSP_LAYOUT}" == standard ]] && [[ ! "${FS_TYPE}" == btrfs ]]; then
	log LVM_UUID="$LVM_UUID"; fi
    local MOUNT_POINT="$(prep_init_mount_point "$TARGET_DEVICE" "$TARGET_PARTITION" "$VARIANT_CONFIG" "${OSP_FILESYSTEM:-ext4}" "${OSP_LAYOUT:-basic}" "${LUKS_UUID}")"

    # Initialize/install Guix!
    log Guix will now be initialized on MOUNT_POINT="$MOUNT_POINT"

    # The LVM_UUID variable is only needed when using luks. Since
    # TARGET_PARTITION will generally refer to
    # /dev/mapper/loop0p2_mapped if we are using luks, we need to find
    # the UUID of just the second partition of the TARGET_DEVICE
    initialize_guix "$VARIANT_CONFIG" "$MOUNT_POINT" "$TARGET_DEVICE" "${OSP_FILESYSTEM:-ext4}" "$GUIX_COMMAND"

    # Deactivate lvm if needed
    if "${VGCHANGE}" "$INSTANCE_NAME"_vg01 -an &>/dev/null; then
	log Successfully deactivated lvm volume group "$INSTANCE_NAME"_vg01
    else
	log Warning: failed to deactivate lvm volume group "$INSTANCE_NAME"_vg01
    fi
    # Close luks if needed (must have lvm deactivated)
    if [[ -n "$LUKS_PASSPHRASE" ]]; then
    #if "${CRYPTSETUP}" isLuks "$TARGET_PARTITION" &>/dev/null; then
	if "${CRYPTSETUP}" luksClose "${TARGET_PARTITION##*/}" &>/dev/null; then
	    log Successfully closed luks mapping for "${TARGET_PARTITION##*/}"
	else
	    log Failed to close luks mapping for "${TARGET_PARTITION##*/}"
	    return 1
	fi
    fi
    
    # Undo the losetup if needed.
    if [[ ! -b "$TARGET_DEVICE_ORIG" ]]; then
	"${LOSETUP}" -d "$TARGET_DEVICE"; fi

    # remove partition mapping
    "${KPARTX}" -d "$TARGET_DEVICE"

}
[[ "$1" == '--source-only' ]] || main "$@"
