(use-modules (gnu)
             (ice-9 match))

;; Load config-base from current working directory if available
;; and fall back to installed version.
(let ((config-base (string-append (dirname (current-filename))
                                  "/config-base.scm")))
  (if (file-exists? config-base)
      (load config-base)
      (load "@EXAMPLEDIR@/config-base.scm")))

(define %target-uuid (getenv "TARGET_UUID"))

(define %mapped-devices
  (let ((luks-devices
         (if (getenv "LUKS_UUID")
             (list (mapped-device
                    (source (uuid (getenv "LUKS_UUID")))
                    (targets '("luks_root"))
                    (type luks-device-mapping)))
             '()))
        (lvm-devices
         (if (and (string=? "advanced" (getenv "OSP_LAYOUT"))
                  (not (string=? "btrfs" (getenv "FS_TYPE"))))

             (let ((myvg (string-append (getenv "INSTANCE_NAME") "_vg01")))
               (list (mapped-device
                      (source myvg)
                      (targets (list (string-append myvg "-lv_root")
                                     (string-append myvg "-lv_home")
                                     (string-append myvg "-lv_gnu_store")
                                     (string-append myvg "-lv_var_lib")
                                     (string-append myvg "-lv_var_log")
                                     (string-append myvg "-lv_swap")))
                      (type lvm-device-mapping))))
             '())))
    (append luks-devices lvm-devices)))

(define %file-systems
  (match (getenv "OSP_LAYOUT")
    ("advanced"
     (if (string=? "btrfs" (getenv "FS_TYPE"))
         (list (file-system
                 (device (uuid %target-uuid))
                 (dependencies %mapped-devices)
                 (mount-point "/")
                 (type "btrfs")
                 (options "subvol=/system-root"))
               (file-system
                 (device (uuid %target-uuid))
                 (dependencies %mapped-devices)
                 (mount-point "/gnu/store")
                 (type "btrfs")
                 (options "subvol=system-root/gnu/store"))
               (file-system
                 (device (uuid %target-uuid))
                 (dependencies %mapped-devices)
                 (mount-point "/var/log")
                 (type "btrfs")
                 (options "subvol=system-root/var/log"))
               (file-system
                 (device (uuid %target-uuid))
                 (dependencies %mapped-devices)
                 (mount-point "/var/lib")
                 (type "btrfs")
                 (options "subvol=system-root/var/lib"))
               (file-system
                 (device (uuid %target-uuid))
                 (dependencies %mapped-devices)
                 (mount-point "/home")
                 (type "btrfs")
                 (options "subvol=system-root/home"))
               (file-system
                 (device (uuid %target-uuid))
                 (dependencies %mapped-devices)
                 (mount-point "/swap")
                 (needed-for-boot? #t)
                 (type "btrfs")
                 (flags '(no-atime))
                 (options "subvol=/system-root/swap,compress=none")))
         ;; Assume LVM.
         (list (file-system
                 (device (string-append "/dev/" (getenv "INSTANCE_NAME")
                                        "_vg01/lv_root"))
                 (mount-point "/")
                 (dependencies %mapped-devices)
                 (needed-for-boot? #t)
                 (type (getenv "FS_TYPE")))
               (file-system
                 (device (string-append "/dev/" (getenv "INSTANCE_NAME")
                                        "_vg01/lv_home"))
                 (mount-point "/home")
                 (dependencies %mapped-devices)
                 (needed-for-boot? #t)
                 (type (getenv "FS_TYPE")))
               (file-system
                 (device (string-append "/dev/" (getenv "INSTANCE_NAME")
                                        "_vg01/lv_var_log"))
                 (mount-point "/var/log")
                 (dependencies %mapped-devices)
                 (needed-for-boot? #t)
                 (type (getenv "FS_TYPE")))
               (file-system
                 (device (string-append "/dev/" (getenv "INSTANCE_NAME")
                                        "_vg01/lv_var_lib"))
                 (mount-point "/var/lib")
                 (dependencies %mapped-devices)
                 (needed-for-boot? #t)
                 (type (getenv "FS_TYPE")))
               (file-system
                 (device (string-append "/dev/" (getenv "INSTANCE_NAME")
                                        "_vg01/lv_gnu_store"))
                 (mount-point "/gnu/store")
                 (dependencies %mapped-devices)
                 (needed-for-boot? #t)
                 (type (getenv "FS_TYPE"))))))
    (_
     (list (file-system
             (device (uuid %target-uuid))
             (mount-point "/")
             (dependencies %mapped-devices)
             (needed-for-boot? #t)
             (type (getenv "FS_TYPE")))))))

(define %swap-devices
  (if (and (string=? "advanced" (getenv "OSP_LAYOUT"))
           (not (string=? "btrfs" (getenv "FS_TYPE"))))
      (list (swap-space
             (dependencies %mapped-devices)
             (target (file-system-label
                      (string-append (getenv "INSTANCE_NAME")
                                     "-swap")))))
      '()))

(operating-system
  (inherit default-os)
  (mapped-devices %mapped-devices)
  (file-systems (append %file-systems %base-file-systems))
  (swap-devices %swap-devices))
