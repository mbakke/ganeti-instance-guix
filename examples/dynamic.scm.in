(use-modules (gnu)
             (ice-9 match))

;; Load config-base from current working directory if available
;; and fall back to installed version.
(let ((config-base (string-append (dirname (current-filename))
                                  "/config-base.scm")))
  (if (file-exists? config-base)
      (load config-base)
      (load "@EXAMPLEDIR@/config-base.scm")))

(define %target-uuid (getenv "TARGET_UUID"))

(define %mapped-devices
  (if (getenv "LUKS_UUID")
      (list (mapped-device
             (source (uuid (getenv "LUKS_UUID")))
             (targets '("luks_root"))
             (type luks-device-mapping)))
      '()))

(define %file-systems
  (match (getenv "OSP_LAYOUT")
    ("advanced"
     (list (file-system
             (device (uuid %target-uuid))
             (dependencies %mapped-devices)
             (mount-point "/")
             (type "btrfs")
             (options "subvol=/system-root"))
           (file-system
             (device (uuid %target-uuid))
             (dependencies %mapped-devices)
             (mount-point "/gnu/store")
             (type "btrfs")
             (options "subvol=system-root/gnu/store"))
           (file-system
             (device (uuid %target-uuid))
             (dependencies %mapped-devices)
             (mount-point "/var/log")
             (type "btrfs")
             (options "subvol=system-root/var/log"))
           (file-system
             (device (uuid %target-uuid))
             (dependencies %mapped-devices)
             (mount-point "/var/lib")
             (type "btrfs")
             (options "subvol=system-root/var/lib"))
           (file-system
             (device (uuid %target-uuid))
             (dependencies %mapped-devices)
             (mount-point "/home")
             (type "btrfs")
             (options "subvol=system-root/home"))
           (file-system
             (device (uuid %target-uuid))
             (dependencies %mapped-devices)
             (mount-point "/swap")
             (needed-for-boot? #t)
             (type "btrfs")
             (flags '(no-atime))
             (options "subvol=/system-root/swap,compress=none"))))
    (_
     (list (file-system
             (device (uuid %target-uuid))
             (mount-point "/")
             (dependencies %mapped-devices)
             (needed-for-boot? #t)
             (type (getenv "FS_TYPE")))))))

(operating-system
  (inherit default-os)
  (mapped-devices %mapped-devices)
  (file-systems (append %file-systems %base-file-systems)))
